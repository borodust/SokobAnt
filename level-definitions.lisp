(cl:in-package :sokob-ant)

(defun set-first-level-items ()
  (setf *items* (list
		 (list 1 :aphid (list (gamekit:vec2 7 6)))))
  (setf *player-position* (gamekit:vec2 7 3))
  (setf *last-direction* :up))

(defun get-first-level-targets ()
  (list (list 1 :ant-hole (list (gamekit:vec2 7 9)))))

(defun get-first-level ()
  (list (list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-corner *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*)
	      (CONS :straight-WALL  *rotate-90-left*) (CONS :INNER-corner *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
     
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-corner 0) (CONS :straight-WALL  *rotate-90-right*) (CONS :straight-WALL  *rotate-90-right*)
	      (CONS :straight-WALL  *rotate-90-right*) (CONS :INNER-corner *rotate-90-right*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))))

(defun set-second-level-items ()
  (setf *items* (list
		 (list 1 :aphid (list (gamekit:vec2 7 6)))
		 (list 2 :rock (list (gamekit:vec2 7 7)))))
  (setf *player-position* (gamekit:vec2 7 3))
  (setf *last-direction* :up))

(defun get-second-level-targets ()
  (list (list 1 :ant-hole (list (gamekit:vec2 7 10)))))

(defun get-second-level ()
  (list (list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-corner *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*)
	      (CONS :straight-WALL  *rotate-90-left*) (CONS :INNER-corner *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
     
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (cons :inner-wall 0) (cons :outer-corner 0) (cons :free 0)
	      (cons :outer-corner *rotate-90-right*) (cons :inner-wall 0) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (cons :inner-wall 0) (CONS :straight-WALL  0) (cons :free 0)
	      (CONS :straight-wall *rotate-180*) (cons :inner-wall 0) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (cons :inner-wall 0) (CONS :straight-WALL  0) (cons :free 0)
	      (CONS :straight-wall *rotate-180*) (cons :inner-wall 0) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (cons :inner-wall 0) (CONS :INNER-corner 0) (CONS :straight-WALL  *rotate-90-right*)
	      (CONS :INNER-corner *rotate-90-right*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (cons :inner-wall 0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))))


(defun set-third-level-items ()
  (setf *items* (list
		 (list 1 :aphid (list (gamekit:vec2 11 8)))
		 (list 2 :rock (list (gamekit:vec2 7 5)))
		 (list 3 :rock (list (gamekit:vec2 5 4)))
		 (list 4 :twig (list (gamekit:vec2 9 8) (gamekit:vec2 9 9)))
		 (list 5 :twig (list (gamekit:vec2 8 4) (gamekit:vec2 8 5)))))
  (setf *player-position* (gamekit:vec2 3 4))
  (setf *last-direction* :up))

(defun get-third-level-targets ()
  (list (list 1 :ant-hole (list (gamekit:vec2 3 9)))))

(defun get-third-level ()
  (list (list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (cons :free 0) (cons :free 0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (cons :free 0) (cons :free 0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0) (cons :inner-wall 0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-CORNER  0) (CONS :STRAIGHT-WALL  *rotate-90-right*)
	      (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*)
	      (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*)
	      (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :INNER-CORNER  *rotate-90-right*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))))


(defun set-fourth-level-items ()
  (setf *items* (list
		 (list 1 :aphid (list (gamekit:vec2 11 10)))
		 (list 2 :aphid (list (gamekit:vec2 6 6)))
		 (list 3 :rock (list (gamekit:vec2 7 11)))
		 (list 4 :rock (list (gamekit:vec2 5 6)))
		 (list 5 :twig (list (gamekit:vec2 8 10) (gamekit:vec2 8 11)))))
  (setf *player-position* (gamekit:vec2 3 3))
  (setf *last-direction* :up))

(defun get-fourth-level-targets ()
  (list (list 1 :ant-hole (list (gamekit:vec2 12 3)))
	(list 2 :ant-hole (list (gamekit:vec2 3 3)))))

(defun get-fourth-level ()
  (list (list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-CORNER  *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*)
	       (CONS :inner-corner *rotate-180*) (CONS :inner-corner *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*)
	      (CONS :STRAIGHT-WALL  *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*)
	      (CONS :STRAIGHT-WALL  *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*) (CONS :STRAIGHT-WALL  *rotate-90-left*)
	      (CONS :INNER-CORNER  *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :outer-corner *rotate-90-right*) (CONS :straight-wall *rotate-90-right*) (CONS :inner-corner *rotate-90-right*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :outer-corner *rotate-180*) (CONS :outer-corner *rotate-90-left*) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :outer-corner  *rotate-180*) (CONS :straight-wall *rotate-90-left*) (CONS :INNER-corner *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :STRAIGHT-WALL  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :outer-corner *rotate-90-right*)
	      (CONS :straight-wall *rotate-90-right*) (CONS :outer-corner 0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-corner 0) (CONS :straight-wall *rotate-90-right*)
	      (CONS :straight-wall *rotate-90-right*) (CONS :outer-corner  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :straight-wall *rotate-180*)
	      (CONS :inner-wall 0) (CONS :straight-wall 0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (cons :inner-wall 0) (cons :inner-wall 0)
	      (cons :inner-wall 0) (cons :INNER-corner 0) (CONS :outer-corner  0) (cons :free 0)
	      (CONS :FREE  0) (CONS :outer-corner *rotate-180*) (CONS :straight-wall  *rotate-90-left*) (CONS :outer-corner  *rotate-90-left*)
	      (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (cons :INNER-corner *rotate-90-left*) (CONS :straight-wall *rotate-90-left*) (CONS :outer-corner *rotate-90-left*) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :STRAIGHT-WALL  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0)
	      (CONS :FREE  0) (CONS :FREE  0) (CONS :FREE  0) (CONS :STRAIGHT-WALL  *rotate-180*) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-CORNER  0) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*)
	      (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*)
	      (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :STRAIGHT-WALL  *rotate-90-right*) (CONS :INNER-CORNER  *rotate-90-right*)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))))

(defun set-fifth-level-items ()
  (setf *items* (list
		 (list 0 :rock (list (gamekit:vec2 7 8)))
		 (list 1 :default-leaf (list (gamekit:vec2 7 6) (gamekit:vec2 7 7)
					     (gamekit:vec2 8 6) (gamekit:vec2 8 7)))))
  (setf *player-position* (gamekit:vec2 7 3))
  (setf *last-direction* :up))

(defun get-fifth-level-targets ()
  (list (list 1 :big-ant-hole (list (gamekit:vec2 7 9) (gamekit:vec2 8 9)
				    (gamekit:vec2 7 10) (gamekit:vec2 8 10)))))

(defun get-fifth-level ()
  (list (list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-corner *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*) (CONS :straight-WALL  *rotate-90-left*)
	      (CONS :straight-WALL  *rotate-90-left*) (CONS :INNER-corner *rotate-180*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
     
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL 0) (CONS :INNER-WALL 0)
	      (CONS :INNER-WALL  0) (CONS :straight-WALL  0) (CONS :free 0) (cons :free 0)
	      (CONS :free 0) (CONS :straight-wall *rotate-180*) (CONS :inner-WALL  0) (CONS :inner-WALL  *rotate-90-left*)
	      (CONS :inner-WALL  *rotate-90-left*) (CONS :inner-WALL  *rotate-90-left*) (cons :inner-wall 0) (cons :inner-wall 0))

	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-corner 0) (CONS :straight-WALL  *rotate-90-right*) (CONS :straight-WALL  *rotate-90-right*)
	      (CONS :straight-WALL  *rotate-90-right*) (CONS :INNER-corner *rotate-90-right*) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))
	(list (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0)
	      (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0) (CONS :INNER-WALL  0))))


(defun get-level-list ()
  (list
   (list  #'set-first-level-items #'get-first-level-targets #'get-first-level)
   (list  #'set-second-level-items #'get-second-level-targets #'get-second-level)
   (list  #'set-third-level-items #'get-third-level-targets #'get-third-level)
   (list  #'set-fourth-level-items #'get-fourth-level-targets #'get-fourth-level)
   (list  #'set-fifth-level-items #'get-fifth-level-targets #'get-fifth-level)
   (list  #'set-level-6-items #'get-level-6-targets #'get-level-6)
;   (list  #'set-level-7-items #'get-level-7-targets #'get-level-7)
   ))
